name: Rolling Release

# This workflow runs CI checks once as a quality gate, then builds release artifacts.

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  # Run CI checks first (lint, test) before building release
  ci:
    uses: ./.github/workflows/ci.yml

  build:
    name: Build
    needs: ci
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest  
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install cross-compilation and static linking dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        # Install static linking libraries for all Linux builds
        sudo apt-get install -y libc6-dev build-essential
        # Install cross-compilation tools for ARM64
        if [ "${{ matrix.goarch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        fi

    - name: Set version variables
      shell: bash
      run: |
        echo "VERSION=latest" >> $GITHUB_ENV
        echo "COMMIT=${GITHUB_SHA::7}" >> $GITHUB_ENV
        echo "DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
        VERSION: ${{ env.VERSION }}
        COMMIT: ${{ env.COMMIT }}
        DATE: ${{ env.DATE }}
      shell: bash
      run: |
        # Use make build for consistent build logic
        make build
        
        # Rename to expected output for Windows
        if [ "$GOOS" = "windows" ] && [ -f linkding-to-opml ]; then
          mv linkding-to-opml linkding-to-opml.exe
        fi

    - name: Create archive (Unix)
      if: matrix.goos != 'windows'
      shell: bash
      run: |
        archive_name="linkding-to-opml_${VERSION}_${{ matrix.goos }}_${{ matrix.goarch }}"
        tar -czf "${archive_name}.tar.gz" "linkding-to-opml"
        echo "ARCHIVE=${archive_name}.tar.gz" >> $GITHUB_ENV

    - name: Create archive (Windows)
      if: matrix.goos == 'windows'
      shell: powershell
      run: |
        $archive_name = "linkding-to-opml_$($env:VERSION)_${{ matrix.goos }}_${{ matrix.goarch }}"
        Compress-Archive -Path "linkding-to-opml.exe" -DestinationPath "${archive_name}.zip"
        echo "ARCHIVE=${archive_name}.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARCHIVE }}
        path: ${{ env.ARCHIVE }}

  release:
    name: Create Rolling Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true

    - name: Generate checksums
      run: |
        cd dist
        sha256sum * > checksums.txt

    - name: Delete existing latest tag and release
      run: |
        # Delete the tag locally and remotely if it exists
        git tag -d latest || true
        git push origin :refs/tags/latest || true
        
        # Delete the release if it exists
        gh release delete latest --yes || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create new latest tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag latest
        git push origin latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Rolling Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: latest
        name: "Latest Development Build"
        body: |
          **⚠️ This is a pre-release development build ⚠️**
          
          This is an automated rolling release built from the latest commit on the main branch.
          
          **Commit:** ${{ github.sha }}
          **Build Date:** ${{ github.run_started_at }}
          
          This build may be unstable and is intended for testing purposes only.
          For stable releases, please use the numbered version releases.
        files: dist/*
        draft: false
        prerelease: true
        make_latest: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}